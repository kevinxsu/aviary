package aviary

import (
	"strconv"
	"strings"
	"unicode"
)

// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
func WCMap(filename string, contents string) []KeyValue {
	// function to detect word separators.
	ff := func(r rune) bool { return !unicode.IsLetter(r) }

	// split contents into an array of words.
	words := strings.FieldsFunc(contents, ff)

	kva := []KeyValue{}
	for _, w := range words {
		kv := KeyValue{w, "1"}
		kva = append(kva, kv)
	}
	return kva
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func WCReduce(key string, values []string) string {
	sum := 0
	for _, value := range values {
		casted, err := strconv.Atoi(value)
		if err != nil {
			panic(err)
		}
		sum += casted
	}
	return strconv.Itoa(sum)
}

// from 6.5840
